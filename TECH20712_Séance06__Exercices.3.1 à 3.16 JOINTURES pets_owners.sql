/*
	Fichier créé par Ivan Maksymyk
	Édité par Bogdan Negoita

	HEC Montréal, Gestion des bases de données

	Séance 3, Exercices sur les jointures

	Remarque importante: avant de commencer des exercices comme ceux-ci, il vaut toujours 
	la peine de faire un profilage des données pour mieux comprendre :

		1) la structure des tables de la base de données et
		2) les données contenues dans les différentes tables de la base de données.
*/

USE OwnersAndPets
GO


/* Exercice 3.1 :
	Générez la liste des personnes qui sont propriétaires d'un animal dont l'âge est de 2 ans. 
*/
SELECT O.OwnerName
FROM Owners O
	INNER JOIN Pets P ON O.OwnerID = P.OwnerID
WHERE P.PetAge = 2


-- C'est toujours une bonne idée de vérifier vos résultats pour vous assurer que la requête est sans erreur.
SELECT * 
FROM Pets


/* Exercice 3.2 :
	Générez la liste des personnes qui sont propriétaires d'un animal dont l'âge est entre 2 et moins de 3 ans.
*/
SELECT O.OwnerName
FROM Owners O
	INNER JOIN Pets P ON O.OwnerID = P.OwnerID
WHERE P.PetAge >= 2 and P.PetAge < 3

/* filter accoording to the PetAge*/


/* Exercice 3.3 :
	Générez la liste des personnes **uniques** (noms distinct) qui sont le propriétaires d'un animal dont l'âge est entre 2 et moins de 3 ans.
	We simply added a DISTINCT to display only distinct names
*/
SELECT DISTINCT O.OwnerName
FROM Owners O
	INNER JOIN Pets P ON O.OwnerID = P.OwnerID
WHERE P.PetAge >= 2 and P.PetAge < 3


/* Exercice 3.4 :
	En utilisant des alias ​​de table, générez la liste des personnes **uniques** qui sont le propriétaire d'un animal dont 
	l'âge est entre 2 et moins de 3 ans.
*/
SELECT DISTINCT O.OwnerName
FROM Owners O
	INNER JOIN Pets P ON O.OwnerID = P.OwnerID
WHERE P.PetAge >= 2 and P.PetAge < 3

	--OU--

--ajout 'AS'
SELECT DISTINCT O.OwnerName
FROM Owners AS O
	INNER JOIN Pets AS P ON O.OwnerID = P.OwnerID
WHERE P.PetAge >= 2 and P.PetAge < 3


/* Exercice 3.5 :
	Générez la liste 1) des personnes ET 2) leurs animaux lorsque l'animal est âgé de 3 ans ou plus.
*/
SELECT 
	  O.OwnerName
	, P.PetName
FROM Owners O
	INNER JOIN Pets P ON O.OwnerID = P.OwnerID
WHERE P.PetAge >= 3

-- tous les attributs --

SELECT 
	 *
FROM Owners O
	INNER JOIN Pets P ON O.OwnerID = P.OwnerID
WHERE P.PetAge >= 3

/* Exercice 3.6 :
	Régénèrez la liste précédente, mais en modifiant l'ordre des colonnes dans l'ensemble de réponses. Donc, on veut
	afficher 1) les animaux ET 2) les personnes qui possèdent ces animaux dont l'âge est de 3 ans ou plus.
*/
SELECT 
	  P.PetName
	, O.OwnerName
FROM Owners O
	INNER JOIN Pets P ON O.OwnerID = P.OwnerID
WHERE P.PetAge >= 3


/* Exercice 3.7 :
	Générez la liste des personnes qui sont le propriétaire d'un animal dont le nom contient la lettre 's'.
*/
SELECT O.OwnerName
FROM Owners O
	INNER JOIN Pets P ON O.OwnerID = P.OwnerID
WHERE P.PetName LIKE '%s%'


/* Exercice 3.8 : 
	Générez la liste des animaux, leurs âges et leurs propriétaires; si l'animal n'a pas de propriétaire, on
	verra NULL dans la cellule.
*/
SELECT 
	  P.PetName
	, P.PetAge
	, O.OwnerName
FROM Pets P 
	LEFT JOIN Owners O ON O.OwnerID = P.OwnerID


/* Exercice 3.9 :
	Refaites la requête précédente, au moyen d'une jointure DROITE au lieu d'une jointure GAUCHE. 
*/
SELECT 
	  P.PetName
	, P.PetAge
	, O.OwnerName
FROM Owners O 
	RIGHT JOIN Pets P  ON O.OwnerID = P.OwnerID


/* Exercice 3.10 :
	Générez la liste des animaux, leurs âges, leurs propriétaires et leurs origines géographiques; si l'animal n'a pas de propriétaire, on
	verra NULL dans la cellule pour le propriétaire. On ne veut que les animaux dont l'espèce a une origine géographique.
*/
SELECT 
	  P.PetName
	, P.PetAge
	, O.OwnerName
	, OG.Origin as 'Pet Origin :)' -- we rename it --
FROM Pets P 
	LEFT  JOIN Owners	O	ON O.OwnerID = P.OwnerID 
	INNER JOIN Origins	OG	ON P.PetSpeciesID = OG.PetSpeciesID

/* Exercice 3.11 :
	Refaites la requête précédente, mais affichez aussi les animaux dont l'espèce n'a pas d'origine géographique.
*/
SELECT 
	  P.PetName
	, P.PetAge
	, O.OwnerName
	, OG.Origin as 'Pet Origin :)'
FROM Pets P 
	LEFT JOIN Owners	O	ON O.OwnerID = P.OwnerID
	LEFT JOIN Origins	OG	ON P.PetSpeciesID = OG.PetSpeciesID


/* Exercice 3.12 :
	Générez la liste des animaux, leurs âges, leurs propriétaires et leurs origines géographiques; si l'animal n'a pas de propriétaire, on
	ne verra pas cet animal dans les résultats. Retenez seulement les animaux dont l'origine géographique est l'Europe.  
*/
SELECT 
	  P.PetName
	, P.PetAge
	, O.OwnerName
	, OG.Origin as 'Pet Origin :)'
FROM Pets P 
	INNER JOIN Owners	O	ON O.OwnerID = P.OwnerID
	INNER JOIN Origins	OG	ON P.PetSpeciesID = OG.PetSpeciesID
WHERE OG.Origin = 'Europe' --we only want animals from Europe, so we add this line --


/* Exercice 3.13 :
	Générez la liste de toutes les personnes qui n'ont pas d'animaux. On voudra leur nom et leur ID (toutes les infos de la table Owners).
*/
SELECT 
	  O.OwnerName
	, O.OwnerID
FROM Owners O 
	LEFT JOIN Pets P  ON O.OwnerID = P.OwnerID
WHERE P.OwnerID IS NULL --should not have an animal, we we put where Owner IS NULL --

--OU

SELECT O.*
FROM Owners O 
	LEFT JOIN Pets P  ON O.OwnerID = P.OwnerID
WHERE P.OwnerID IS NULL


/* Exercice 3.14 :
	Générez la liste de toutes les animaux qui n'ont pas de maitre. On voudra leur nom, leur ID, leur espèce ID et leur âge.
*/
SELECT 
	  P.PetName
	, P.PetID
	, P.PetSpeciesID
	, P.PetAge
FROM Pets P
	LEFT JOIN Owners O ON P.OwnerID = O.OwnerID
WHERE O.OwnerID IS NULL


/* Exercice 3.15 :
	Quel est le nom animal le plus populaire, peu importe si l'animal a de propriétaire ou pas ? 
	Imprimez le nom le plus populaire en haut de la liste.
*/
SELECT 
	  P.PetName
	, COUNT(*) AS 'Compte Nom'
FROM Pets P
	LEFT JOIN Owners O ON P.OwnerID = O.OwnerID
GROUP BY P.PetName
ORDER BY 2 DESC

--OU

SELECT 
	  P.PetName
	, COUNT(P.PetName) AS 'Compte Nom'
FROM Pets P
	LEFT JOIN Owners O ON P.OwnerID = O.OwnerID
GROUP BY P.PetName
ORDER BY 2 DESC

--OU SI ON VEUT JUSTE 1 LIGNE

SELECT TOP 1
	  P.PetName
	, COUNT(P.PetName) AS 'Compte Nom'
FROM Pets P
	LEFT JOIN Owners O ON P.OwnerID = O.OwnerID
GROUP BY P.PetName
ORDER BY 2 DESC


/* Exercice 3.16 :
	Y a-t-il des propriétaires avec plus de deux animaux ?
	Expliquez la logique derrière l'utilisation du 'inner join'.
	Pourquoi avoir ajouté OwnerID dans le SELECT?
*/
SELECT 
	  O.OwnerName
	, O.OwnerID
	, COUNT(*)  AS 'Compte Animaux'
FROM Owners O 
	LEFT JOIN Pets P  ON O.OwnerID = P.OwnerID
GROUP BY O.OwnerName, O.OwnerID
HAVING COUNT(*) > 2


--Validation
SELECT *
FROM Pets P
ORDER BY OwnerID